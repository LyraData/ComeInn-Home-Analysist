from flask import Flask, request, render_template
import pandas as pd
import numpy as np
import joblib
import os

app = Flask(__name__)

# ==== C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ====
MODEL_DIR = r"D:\COMEINN_HOME_PROJECT\models"
CUSTOMER_DATA_PATH = r"D:\COMEINN_HOME_PROJECT\FLASKAPI\customer_behavior.csv"
ROOM_DATA_PATH = r"D:\COMEINN_HOME_PROJECT\FLASKAPI\room_inventory.csv"
AVAILABLE_DISTRICTS = ["Qu·∫≠n 10", "Qu·∫≠n 9", "Qu·∫≠n 3", "G√≤ V·∫•p"]

# ==== Load d·ªØ li·ªáu v√† model ====
def load_resources():
    try:
        model = joblib.load(os.path.join(MODEL_DIR, 'model_churn.pkl'))
        encoders = joblib.load(os.path.join(MODEL_DIR, 'label_encoders.pkl'))
        features = joblib.load(os.path.join(MODEL_DIR, 'feature_list.pkl'))
    except Exception as e:
        print(f"[ERROR] Load model/encoders failed: {e}")
        model, encoders, features = None, None, None

    try:
        df_customers = pd.read_csv(CUSTOMER_DATA_PATH, encoding='utf-8-sig')
        df_customers['StartDate'] = pd.to_datetime(df_customers['StartDate'], errors='coerce')
    except Exception as e:
        print(f"[ERROR] Read customer data failed: {e}")
        df_customers = pd.DataFrame()

    try:
        df_rooms = pd.read_csv(ROOM_DATA_PATH, encoding='utf-8-sig')
        df_rooms.dropna(subset=['RoomID', 'RoomType', 'RoomGender', 'Price', 'Address'], inplace=True)
        df_rooms['Price'] = df_rooms['Price'].astype(int)
    except Exception as e:
        print(f"[ERROR] Read room data failed: {e}")
        df_rooms = pd.DataFrame()

    return model, encoders, features, df_customers, df_rooms

model, label_encoders, features, df_all, df_rooms = load_resources()

# ==== G·ª£i √Ω ph√≤ng ====
def suggest_room_for_new_customer(df_rooms, gender, max_price, preferred_districts=None, top_n=3):
    gender_filter = df_rooms['RoomGender'].isin([gender, 'Nam/N·ªØ'])
    price_filter = df_rooms['Price'] <= max_price

    # L·ªçc qu·∫≠n n·∫øu c√≥ ch·ªçn
    if preferred_districts:
        def match_district(address):
            address_lower = address.lower()
            return any(district.lower() in address_lower for district in preferred_districts)
        district_filter = df_rooms['Address'].apply(match_district)
    else:
        district_filter = True

    # √Åp d·ª•ng l·ªçc v√† lo·∫°i tr√πng m√£ ph√≤ng
    filtered = df_rooms[gender_filter & price_filter & district_filter].drop_duplicates(subset='RoomID')

    if not filtered.empty:
        return filtered.sort_values(by='Price').head(top_n).to_dict(orient='records')
    else:
        return []

# ==== Trang ch·ªß ====
@app.route('/')
def home():
    return render_template('home.html')

# ==== G·ª£i √Ω ph√≤ng ====
@app.route('/suggest_room_form', methods=['GET', 'POST'])
def suggest_room_form():
    if request.method == 'POST':
        try:
            gender = request.form.get('Gender', 'Nam')
            preferred_districts = request.form.getlist('PreferredDistricts')

            try:
                max_price = int(request.form.get('MaxPrice', 9999999))
            except ValueError:
                return render_template(
                    'suggest_room.html',
                    rooms=[],
                    reason_room="‚ùå L·ªói: Gi√° thu√™ t·ªëi ƒëa ph·∫£i l√† m·ªôt s·ªë nguy√™n.",
                    reason_district="Kh√¥ng x√°c ƒë·ªãnh",
                    districts=AVAILABLE_DISTRICTS,
                    gender=gender,
                    max_price=request.form.get('MaxPrice'),
                    preferred_districts=preferred_districts
                )

            suggestions = suggest_room_for_new_customer(
                df_rooms, gender, max_price, preferred_districts
            )

            if suggestions:
                return render_template(
                    'suggest_room.html',
                    rooms=suggestions,
                    reason_room="üîç G·ª£i √Ω d·ª±a tr√™n gi·ªõi t√≠nh, gi√° thu√™ v√† qu·∫≠n ∆∞u ti√™n b·∫°n ch·ªçn.",
                    reason_district=", ".join(preferred_districts) if preferred_districts else "Kh√¥ng c√≥ qu·∫≠n ∆∞u ti√™n",
                    districts=AVAILABLE_DISTRICTS,
                    gender=gender,
                    max_price=max_price,
                    preferred_districts=preferred_districts
                )
            else:
                return render_template(
                    'suggest_room.html',
                    rooms=[],
                    reason_room="‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.",
                    reason_district="Vui l√≤ng th·ª≠ l·∫°i v·ªõi m·ª©c gi√° cao h∆°n ho·∫∑c ch·ªçn qu·∫≠n kh√°c.",
                    districts=AVAILABLE_DISTRICTS,
                    gender=gender,
                    max_price=max_price,
                    preferred_districts=preferred_districts
                )

        except Exception as e:
            return f"‚ùå L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}", 400

    # N·∫øu l√† GET, hi·ªÉn th·ªã form tr·ªëng
    return render_template(
        'suggest_room.html',
        districts=AVAILABLE_DISTRICTS,
        gender='Nam',
        max_price='',
        preferred_districts=[]
    )

# ==== D·ª± ƒëo√°n churn ====
@app.route('/predict_churn_form', methods=['GET', 'POST'])
def predict_churn_by_id():
    if request.method == 'POST':
        customer_id = request.form.get('CustomerID', '').strip()
        if not customer_id:
            return "‚ùå Vui l√≤ng nh·∫≠p m√£ kh√°ch h√†ng.", 400

        df_customer = df_all[df_all['CustomerID'].astype(str) == customer_id]
        if df_customer.empty:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£: {customer_id}", 404

        row = df_customer.sort_values('StartDate', ascending=False).iloc[0].copy()

        try:
            # T√≠nh to√°n ƒë·∫∑c tr∆∞ng
            row['HasCheckout'] = int(pd.notnull(row['CheckoutDate']))
            row['ActualStayDays'] = (
                (pd.to_datetime(row['CheckoutDate']) - pd.to_datetime(row['StartDate'])).days
                if pd.notnull(row['CheckoutDate']) else
                (pd.Timestamp.now() - pd.to_datetime(row['StartDate'])).days
            )
            row['ContractDays'] = max((pd.to_datetime(row['EndDate']) - pd.to_datetime(row['StartDate'])).days, 1)
            row['StayRatio'] = row['ActualStayDays'] / row['ContractDays']
            row['VehicleOwned'] = int(str(row['VehiclePlateType']).strip() != 'Ch∆∞a c·∫≠p nh·∫≠t')
            row['Age'] = max(row['Age'], 0)
            row['AmenityCount'] = len(str(row['Amenities']).split(','))
            row['AgeGroup'] = int(pd.cut([row['Age']], bins=[0, 19, 25, 100], labels=[0, 1, 2])[0])

            # Th√™m c√°c feature b·ªã thi·∫øu v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
            for col in features:
                if col not in row:
                    row[col] = 0 if pd.api.types.is_numeric_dtype(df_all[col]) else "Unknown"

            # Encode label
            for col, le in label_encoders.items():
                val = str(row.get(col, "Unknown"))
                if val not in le.classes_:
                    le.classes_ = np.append(le.classes_, val)
                row[col] = le.transform([val])[0]

            # T·∫°o dataframe ƒë·∫ßu v√†o ch·ªâ v·ªõi c√°c feature h·ª£p l·ªá
            df_input = pd.DataFrame([row[features]])

            prob = model.predict_proba(df_input)[0][1]
            prediction = int(prob > 0.5)

            message = (
                "üòü Kh√°ch c√≥ kh·∫£ nƒÉng **r·ªùi ƒëi**. G·ª£i √Ω: gi·ªØ nguy√™n ph√≤ng c≈©, t·∫∑ng ∆∞u ƒë√£i, g·ªçi ƒëi·ªán h·ªèi thƒÉm."
                if prediction == 1 else
                "üòä Kh√°ch **c√≥ kh·∫£ nƒÉng ·ªü l·∫°i**."
            )

            return render_template(
                'predict_churn.html',
                customer_id=customer_id,
                prediction=prediction,
                probability=round(prob, 4),
                message=message
            )

        except Exception as e:
            return f"‚ùå L·ªói khi d·ª± ƒëo√°n: {str(e)}", 500

    return render_template('predict_churn.html')

# ==== Run App ====

if __name__ == '__main__':
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
        model, label_encoders, features, df_all, df_rooms = load_resources()
    app.run(debug=True)